syntax = "proto3";

package game;
option go_package = "github.com/sariya23/proto_api_games/gen/game;gamev4";


import "google/api/annotations.proto";
import "google/api/date.proto";


service GameService {
    // Создать новую игру
    rpc AddGame(AddGameRequest) returns (AddGameResponse) {
        option (google.api.http) = {
            post: "/v1/game/add"
            body: "*"
        };
    };
    // Получить игру с подробной информацией 
    rpc GetGame(GetGameRequest) returns (GetGameResponse) {
        option (google.api.http) = {
            get: "/v1/games/{game_id}"
        };
    };
    // Получить список игр с укороченной информацией
    rpc GetTopGames(GetTopGamesRequest) returns (GetTopGamesResponse) {
        option (google.api.http) = {
            post: "/v1/games/top"
            body: "*"
        };
    };
    // DeleteGame удалить игру
    rpc DeleteGame(DeleteGameRequest) returns (DeleteGameResponse) {
        option (google.api.http) = {
            delete: "/v1/game/delete/{game_id}"
        };
    };

    // UpdateGameStatus обновить статус игры
    rpc UpdateGameStatus(UpdateGameStatusRequest) returns (UpdateGameStatusReponse) {
        option (google.api.http) = {
            patch: "/v1/game/update_game_status"
            body: "*"
        };
    };
}

message GameRequest {
    string title = 1;
    repeated string genres = 2;
    string description = 3;
    google.type.Date release_date = 4;
    bytes cover_image = 5;
    repeated string tags = 6;
}

message DomainGame {
    string title = 1;
    repeated string genres = 2;
    string description = 3;
    google.type.Date release_date = 4;
    string cover_image_url = 5;
    repeated string tags = 6;
    uint64 ID = 7; 
}

message AddGameRequest {
    GameRequest game = 1;
}

message AddGameResponse {
    uint64 game_id = 1;
}

message GetGameRequest {
    uint64 game_id = 1;
}

message GetGameResponse {
    DomainGame game = 1;
}

message GetTopGamesRequest {
    int32 year = 1;
    uint32 limit = 2;
    repeated string genres = 3;
    repeated string tags = 4;
}

message GetTopGamesResponse {
    repeated ShortGame games = 1;

    message ShortGame {
        uint64 ID = 1;
        string title = 2;
        string description = 3;
        google.type.Date release_date = 4;
        string cover_image_url = 5;

    }
}

message DeleteGameRequest {
    uint64 game_id = 1;
}

message DeleteGameResponse {
    uint64 game_id = 1;
}

enum GameStatusType {
    DRAFT = 0; // Игра в драфте
    PENDING = 1; // Игра валидируется
    PUBLISH = 2; // Игра опубликована
}
message UpdateGameStatusRequest {
    uint64 game_id = 1;
    GameStatusType new_stautus = 2;
}

message UpdateGameStatusReponse {}

